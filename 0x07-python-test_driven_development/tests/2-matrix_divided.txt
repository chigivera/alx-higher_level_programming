# Test cases for matrix_divided function

# Import the function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test normal matrix division
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test with floats in matrix
>>> matrix = [[1.1, -2.2, 3.3], [4.4, 5.5, -6.6]]
>>> matrix_divided(matrix, 3)
[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

# Test with div as float
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 2.5)
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test with negative div
>>> matrix_divided(matrix, -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

# Test with div = 0
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test with non-number div
>>> matrix_divided(matrix, "3")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test with inconsistent row sizes
>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test with non-number in matrix
>>> matrix = [[1, 2, 3], [4, "5", 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with empty matrix
>>> matrix_divided([], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with matrix containing empty row
>>> matrix_divided([[]], 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats